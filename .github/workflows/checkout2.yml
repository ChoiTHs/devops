name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/devops
  VERSION: ${{ github.sha }}
  NAME: devops

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2

      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2        #사용할 동작
        with:                                    #동작에 대한 input값 사용 선언
          context: .                             #context
          file: ./Dockerfile                     #빌드 시 사용할 Dockerfile의 위치 지정
          platforms: linux/amd64                 #이미지 등록 시 Platform 이름 지정
          push: true                             #빌드 후 배포 여부 체크 
          tags: ${{ steps.docker_meta.outputs.tags }}       #빌드 시 위에서 지정한 태그를 사용하도록 지정
          labels: ${{ steps.docker_meta.outputs.labels }}   #빌드 시 위에서 지정한 태그를 사용하도록 지정

  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }}
      # 8090  -> 8090 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8090:8090 --name devops --restart always ${{ env.DOCKER_IMAGE }}:latest
